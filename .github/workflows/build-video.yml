name: Create video

on:
    push:
        branches:
            - master
        paths:
            - 'content/**'
            - 'content/*.json'
            - '**.json'
    workflow_dispatch:

env:
    DEBUG: 1
    AZURE_TTS_KEY: ${{ secrets.AZURE_TTS_KEY }}
    AZURE_TTS_REGION: ${{ secrets.AZURE_TTS_REGION }}
    GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
    GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
    GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
    INSTAGRAM_EMAIL: ${{ secrets.INSTAGRAM_EMAIL }}
    INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
    YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
    #  ACTIONS_RUNNER_DEBUG: true
    #  ACTIONS_STEP_DEBUG: true

jobs:
    TextToSpeech:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup Node.JS environment
              uses: actions/setup-node@v2.1.4
              with:
                  node-version: 14.x

            - name: Get yarn global path
              id: global
              run: |
                  echo "::set-output name=yarnPath::$(yarn global dir)"
                  echo "::set-output name=bashDate::$(date +%d-%m-%Y)"

            - name: podcast-maker CLI cache
              uses: actions/cache@v2
              id: podcast-maker-cache
              with:
                  path: ${{ steps.global.outputs.yarnPath }}
                  key: ${{ runner.os }}-yarn-podcast-maker-${{ steps.global.outputs.bashDate }}

            - name: Install CLI
              if: steps.podcast-maker-cache.outputs.cache-hit != 'true'
              run: yarn global add podcast-maker

            - name: Create SymLink from content directory (on code) to content directory (created by podcast-maker CLI)
              run: |
                  DataPath=$(podcast-maker info content --dir | sed -e "s/\/[^\/]*$//")
                  ContentPath=$(podcast-maker info content --dir)
                  if [ -d "$ContentPath" ]; then 
                      ls $ContentPath;
                      echo "ContentPath exists, deleting it"; 
                      rm -rf $ContentPath; 
                  fi; 
                  echo "Creating SymLink from $(pwd)/content to $DataPath"; 
                  ln -s $(pwd)/content $DataPath

            - name: Create TTS
              run: podcast-maker create tts

            - name: Get tmp path
              id: tmp
              run: echo "::set-output name=tmpPath::$(podcast-maker info tmp --dir)"

            - name: Save TTS files in Artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: audio-files
                  path: ${{ steps.tmp.outputs.tmpPath }}/*.mp3
                  retention-days: 3

            # - name: SSH debug
            #   if: ${{ failure() }}
            #   uses: mxschmitt/action-tmate@v3
            #   with:
            #       limit-access-to-actor: true

    YouTube:
        needs: [TextToSpeech]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Install FFMPEG
              uses: FedericoCarboni/setup-ffmpeg@v1

            - name: Get yarn global path
              id: global
              run: |
                  echo "::set-output name=yarnPath::$(yarn global dir)"
                  echo "::set-output name=bashDate::$(date +%d-%m-%Y)"

            - name: podcast-maker CLI cache
              uses: actions/cache@v2
              id: podcast-maker-cache
              with:
                  path: ${{ steps.global.outputs.yarnPath }}
                  key: ${{ runner.os }}-yarn-podcast-maker-${{ steps.global.outputs.bashDate }}

            - name: Install CLI
              if: steps.podcast-maker-cache.outputs.cache-hit != 'true'
              run: yarn global add podcast-maker

            - name: Get tmp path
              id: tmp
              run: echo "::set-output name=tmpPath::$(podcast-maker info tmp --dir)"

            - name: Download TTS files
              uses: actions/download-artifact@v2
              with:
                  name: audio-files
                  path: ${{ steps.tmp.outputs.tmpPath }}/

            - name: Create SymLink from content directory (on code) to content directory (created by podcast-maker CLI)
              run: |
                  DataPath=$(podcast-maker info content --dir | sed -e "s/\/[^\/]*$//")
                  ContentPath=$(podcast-maker info content --dir)
                  if [ -d "$ContentPath" ]; then 
                      ls $ContentPath;
                      echo "ContentPath exists, deleting it"; 
                      rm -rf $ContentPath; 
                  fi; 
                  echo "Creating SymLink from $(pwd)/content to $DataPath"; 
                  ln -s $(pwd)/content $DataPath

            - name: Create Youtube video
              run: podcast-maker create youtube --upload

            - name: Save video in Artifacts
              if: ${{ failure() }}
              uses: actions/upload-artifact@v2
              with:
                  name: youtube-video-assets
                  path: |
                      ${{ steps.tmp.outputs.tmpPath }}/*.mp4
                      ${{ steps.tmp.outputs.tmpPath }}/*.jpeg
                      ${{ steps.tmp.outputs.tmpPath }}/*.json
                      !${{ steps.tmp.outputs.tmpPath }}/example.json
                  retention-days: 2

    Instagram:
        needs: [TextToSpeech]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Install FFMPEG
              uses: FedericoCarboni/setup-ffmpeg@v1

            - name: Install virtual display
              run: sudo apt-get update && sudo apt-get install -yq --no-install-recommends xvfb xauth ffmpeg libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 libnss3

            - name: Install full Google Chrome
              run: wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && sudo apt install ./google-chrome-stable_current_amd64.deb -y

            - name: Exports chrome bin path to ENV
              run: export CHROME_BIN=$(which google-chrome)

            - name: Get yarn global path
              id: global
              run: |
                  echo "::set-output name=yarnPath::$(yarn global dir)"
                  echo "::set-output name=bashDate::$(date +%d-%m-%Y)"

            - name: podcast-maker CLI cache
              uses: actions/cache@v2
              id: podcast-maker-cache
              with:
                  path: ${{ steps.global.outputs.yarnPath }}
                  key: ${{ runner.os }}-yarn-podcast-maker-${{ steps.global.outputs.bashDate }}

            - name: Install CLI
              if: steps.podcast-maker-cache.outputs.cache-hit != 'true'
              run: yarn global add podcast-maker

            - name: Get tmp path
              id: tmp
              run: echo "::set-output name=tmpPath::$(podcast-maker info tmp --dir)"

            - name: Download TTS files
              uses: actions/download-artifact@v2
              with:
                  name: audio-files
                  path: ${{ steps.tmp.outputs.tmpPath }}/

            - name: Create SymLink from content directory (on code) to content directory (created by podcast-maker CLI)
              run: |
                  DataPath=$(podcast-maker info content --dir | sed -e "s/\/[^\/]*$//")
                  ContentPath=$(podcast-maker info content --dir)
                  if [ -d "$ContentPath" ]; then 
                      ls $ContentPath;
                      echo "ContentPath exists, deleting it"; 
                      rm -rf $ContentPath; 
                  fi; 
                  echo "Creating SymLink from $(pwd)/content to $DataPath"; 
                  ln -s $(pwd)/content $DataPath

            - name: Create Instagram video
              run: xvfb-run --server-args="-screen 0, 1920x1920x24" podcast-maker create instagram --upload

            - name: Save video in Artifacts
              if: ${{ failure() }}
              uses: actions/upload-artifact@v2
              with:
                  name: instagram-video-assets
                  path: |
                      ${{ steps.tmp.outputs.tmpPath }}/*.mp4
                      ${{ steps.tmp.outputs.tmpPath }}/*.jpeg
                      ${{ steps.tmp.outputs.tmpPath }}/*.json
                      !${{ steps.tmp.outputs.tmpPath }}/example.json
                  retention-days: 2
